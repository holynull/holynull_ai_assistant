import requests
from dotenv import load_dotenv
import os
from langchain.agents import tool
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime
import json
import boto3
import uuid
import numpy as np
import pandas as pd
import aiohttp
import aiofiles
import aioboto3
import asyncio
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from plotly.colors import qualitative

load_dotenv(dotenv_path=".env")
API_KEY = os.getenv("AMBERDATA_API_KEY")
BASE_URL = "https://api.amberdata.com"

s3_client = boto3.client("s3")


async def save_figure(fig, filename):
    await asyncio.to_thread(
        fig.savefig, filename, format="png", dpi=300, bbox_inches="tight"
    )


async def get_apr_basis_constant_maturity(asset, interval, start_date, end_date):
    """
    Retrieves the APR (Annual Percentage Rate) basis and constant maturity data for derivatives futures and perpetual contracts.

    This function accesses the Derivatives Futures/Perpetuals APR Basis - Constant Maturities API endpoint, which provides data on the quoted futures basis for various exchanges, interpolated to represent a constant Days to Expiration (DTE). The data is returned with a 15-minute granularity.

    :param asset: The asset symbol (e.g., 'BTC')
    :param interval: The time interval for the data (e.g., '7D | 30D | 90D |180D')
    :param start_date: The start date for the data (in YYYY-MM-DD format)
    :param end_date: The end date for the data (in YYYY-MM-DD format)
    :return: A list of dictionaries containing the following data:
        - timestamp: Datapoint timestamp
        - symbol: Normalized asset symbol, including the selected exchange
        - basisUSD: Total US dollar differential between the spot price and the constant maturity future's price
        - apr: Annualized yield calculated from the spot price and future's price differential

    If the API request fails, it returns an error message as a string.
    """
    endpoint = f"/markets/derivatives/analytics/futures-perpetuals/apr-basis"
    url = BASE_URL + endpoint

    headers = {"x-api-key": API_KEY, "Content-Type": "application/json"}

    params = {
        "asset": asset,
        "interval": interval,
        "startDate": start_date,
        "endDate": end_date,
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                response.raise_for_status()
                data = await response.json()
        if (
            data
            and "payload" in data
            and "data" in data["payload"]
            and len(data["payload"]["data"]) > 0
        ):
            # Extract data
            symbols = {}
            for item in data["payload"]["data"]:
                symbol = item["symbol"]
                timestamp = pd.to_datetime(item["timestamp"], unit="ms")
                apr = item["apr"]
                basis_usd = item["basisUSD"]

                if symbol not in symbols:
                    symbols[symbol] = {"timestamps": [], "aprs": [], "basis_usd": []}

                symbols[symbol]["timestamps"].append(timestamp)
                symbols[symbol]["aprs"].append(apr)
                symbols[symbol]["basis_usd"].append(basis_usd)

            # Convert to DataFrame for each symbol
            symbol_dfs = {}
            for symbol, data in symbols.items():
                df = pd.DataFrame(
                    {
                        "timestamp": data["timestamps"],
                        "apr": data["aprs"],
                        "basis_usd": data["basis_usd"],
                    }
                )
                df.set_index("timestamp", inplace=True)
                symbol_dfs[symbol] = df

            # Select top 5 exchanges based on data volume
            top_exchanges = sorted(
                symbol_dfs.items(), key=lambda x: len(x[1]), reverse=True
            )[:5]

            # 创建两个子图
            fig = make_subplots(
                rows=2,
                cols=1,
                shared_xaxes=True,
                vertical_spacing=0.1,
                subplot_titles=(
                    f"Derivatives Futures/Perpetuals APR for {asset}",
                    f"Derivatives Futures/Perpetuals Basis USD for {asset}",
                ),
            )

            # 定义颜色列表
            colors = [
                "#1f77b4",
                "#ff7f0e",
                "#2ca02c",
                "#d62728",
                "#9467bd",
                "#8c564b",
                "#e377c2",
                "#7f7f7f",
                "#bcbd22",
                "#17becf",
            ]

            # 为APR图表添加数据
            for (symbol, data), color in zip(top_exchanges, colors):
                fig.add_trace(
                    go.Scatter(
                        x=data.index,
                        y=data["apr"],
                        fill="tozeroy",
                        name=symbol,
                        line=dict(color=color),
                    ),
                    row=1,
                    col=1,
                )

            # 为Basis USD图表添加数据
            for (symbol, data), color in zip(top_exchanges, colors):
                fig.add_trace(
                    go.Scatter(
                        x=data.index,
                        y=data["basis_usd"],
                        fill="tozeroy",
                        name=symbol,
                        line=dict(color=color),
                    ),
                    row=2,
                    col=1,
                )

            # 更新布局
            fig.update_layout(
                height=800,
                title_text=f"Derivatives Futures/Perpetuals Data for {asset}\n{start_date} to {end_date}",
            )
            fig.update_xaxes(title_text="Date", row=2, col=1)
            fig.update_yaxes(title_text="APR (%)", row=1, col=1)
            fig.update_yaxes(title_text="Basis USD", row=2, col=1)

            # 保存为HTML文件
            html_filename = (
                f"derivatives_futures_perpetuals_{asset}_{uuid.uuid4()}.html"
            )
            fig.write_html(html_filename)

            # 异步上传到 S3
            async def upload_to_s3():
                async with aioboto3.Session().client("s3") as s3:
                    await s3.upload_file(
                        html_filename,
                        "musse.ai",
                        f"charts/{html_filename}",
                        ExtraArgs={"ContentType": "text/html"},
                    )

            # 异步删除本地文件
            async def remove_local_file():
                await asyncio.to_thread(os.remove, html_filename)

            # 运行异步任务
            await upload_to_s3()
            await remove_local_file()

            # 生成图表URL和统计信息
            img_str = (
                f"Below is the URL for the Derivatives Futures/Perpetuals interactive chart for {asset}."
                + "\n"
                + f'You can use the Interactive Chart in HTML like this: <iframe src="https://musse.ai/charts/{html_filename}" width="100%" height="800px" title="Derivatives Futures/Perpetuals interactive chart for {asset}"></iframe>'
            )

            # Calculate daily statistics
            daily_stats = {}
            for symbol, df in symbol_dfs.items():
                daily_df = df.resample("D").agg(
                    {"apr": ["mean", "min", "max"], "basis_usd": ["mean", "min", "max"]}
                )
                daily_stats[symbol] = daily_df

            # Format daily statistics as a string
            stats_str = "Daily Statistics:\n\n"
            for symbol, stats in daily_stats.items():
                stats_str += f"{symbol}:\n"
                for date, row in stats.iterrows():
                    stats_str += f"  {date.date()}:\n"
                    stats_str += f"    APR: Mean: {row['apr']['mean']:.2f}%, Min: {row['apr']['min']:.2f}%, Max: {row['apr']['max']:.2f}%\n"
                    stats_str += f"    Basis USD: Mean: ${row['basis_usd']['mean']:.2f}, Min: ${row['basis_usd']['min']:.2f}, Max: ${row['basis_usd']['max']:.2f}\n"
                stats_str += "\n"
            return f"We generated area charts showing Derivatives Futures/Perpetuals APR and Basis USD for {asset}. \n{img_str}\n\n{stats_str}"
        else:
            return None
    except aiohttp.ClientError as e:
        return f"API request error: {e}"


async def get_apr_basis_live_term_structure(asset, margin_type="coins", time_format="milliseconds"):
    """
    Retrieves the live APR (Annual Percentage Rate) basis term structure for derivatives futures and perpetual contracts,
    generates a visualization of the data, and uploads the chart to S3.

    :param asset: The asset symbol (e.g., 'BTC', 'ETH')
    :param margin_type: The type of margin for the perpetuals. (e.g. 'coins' or 'stables')
    :param time_format: The time format for the response. (e.g. 'milliseconds' or 'iso')
    :return: A string containing a summary of the data and a link to the interactive chart.
    """
    endpoint = f"/markets/derivatives/analytics/futures-perpetuals/apr-live"
    url = BASE_URL + endpoint

    headers = {"x-api-key": API_KEY}

    params = {"asset": asset, "marginType": margin_type, "timeFormat": time_format}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                response.raise_for_status()
                data = await response.json()

        if data and "payload" in data and len(data["payload"]["data"]) > 0:
            payload = data["payload"]

            # Create a DataFrame from the data
            df = pd.DataFrame(payload["data"])

            # Convert expirationTimestamp to datetime
            df["expirationDate"] = pd.to_datetime(df["expirationTimestamp"], unit="ms")

            # Create subplots
            fig = make_subplots(
                rows=2, cols=2,
                subplot_titles=("APR by Exchange", "Basis by Exchange", "Price by Exchange", "APR vs Basis"),
                specs=[[{"type": "scatter"}, {"type": "scatter"}],
                       [{"type": "scatter"}, {"type": "scatter"}]]
            )

            # Get unique exchanges
            exchanges = df["exchange"].unique()

            # Use Plotly's qualitative color sequence
            colors = qualitative.Plotly

            for i, exchange in enumerate(exchanges):
                exchange_data = df[df["exchange"] == exchange]
                color = colors[i % len(colors)]

                # APR line chart
                fig.add_trace(
                    go.Scatter(x=exchange_data["expirationDate"], y=exchange_data["apr"],
                               mode="lines", name=f"{exchange} APR",
                               line=dict(color=color)),
                    row=1, col=1
                )

                # Basis line chart
                fig.add_trace(
                    go.Scatter(x=exchange_data["expirationDate"], y=exchange_data["basis"],
                               mode="lines", name=f"{exchange} Basis",
                               line=dict(color=color, dash="dash")),
                    row=1, col=2
                )

                # Price line chart
                fig.add_trace(
                    go.Scatter(x=exchange_data["expirationDate"], y=exchange_data["price"],
                               mode="lines", name=f"{exchange} Price",
                               line=dict(color=color)),
                    row=2, col=1
                )

                # APR vs Basis scatter plot
                fig.add_trace(
                    go.Scatter(x=exchange_data["basis"], y=exchange_data["apr"],
                               mode="markers", name=exchange,
                               marker=dict(color=color)),
                    row=2, col=2
                )

            # Update layout
            fig.update_layout(
                height=1000,
                title_text=f"Derivatives Futures/Perpetuals Data for {asset}",
                hovermode="closest"
            )

            # Update axes labels
            fig.update_xaxes(title_text="Expiration Date", row=1, col=1)
            fig.update_xaxes(title_text="Expiration Date", row=1, col=2)
            fig.update_xaxes(title_text="Expiration Date", row=2, col=1)
            fig.update_xaxes(title_text="Basis", row=2, col=2)

            fig.update_yaxes(title_text="APR (%)", row=1, col=1)
            fig.update_yaxes(title_text="Basis (USD)", row=1, col=2)
            fig.update_yaxes(title_text="Price (USD)", row=2, col=1)
            fig.update_yaxes(title_text="APR (%)", row=2, col=2)

            # Save the figure as HTML
            file_name = f"apr_basis_term_structure_{asset}_{uuid.uuid4()}.html"
            fig.write_html(file_name)

            # Upload to S3
            async with aioboto3.Session().client("s3") as s3:
                await s3.upload_file(
                    file_name,
                    "musse.ai",
                    f"charts/{file_name}",
                    ExtraArgs={"ContentType": "text/html"},
                )

            # Generate a public URL for the uploaded file
            s3_url = f"https://musse.ai/charts/{file_name}"

            # Remove local file
            await asyncio.to_thread(os.remove, file_name)

            # Calculate statistics
            stats = df.groupby("exchange").agg({
                "apr": ["mean", "min", "max"],
                "basis": ["mean", "min", "max"],
                "price": ["mean", "min", "max"]
            })

            # Generate natural language response
            response_text = f"APR Basis Live Term Structure for {asset}:\n\n"
            for exchange in exchanges:
                response_text += f"{exchange}:\n"
                response_text += f"  APR: Mean: {stats.loc[exchange, ('apr', 'mean')]:.2f}%, "
                response_text += f"Min: {stats.loc[exchange, ('apr', 'min')]:.2f}%, "
                response_text += f"Max: {stats.loc[exchange, ('apr', 'max')]:.2f}%\n"
                response_text += f"  Basis: Mean: ${stats.loc[exchange, ('basis', 'mean')]:.2f}, "
                response_text += f"Min: ${stats.loc[exchange, ('basis', 'min')]:.2f}, "
                response_text += f"Max: ${stats.loc[exchange, ('basis', 'max')]:.2f}\n"
                response_text += f"  Price: Mean: ${stats.loc[exchange, ('price', 'mean')]:.2f}, "
                response_text += f"Min: ${stats.loc[exchange, ('price', 'min')]:.2f}, "
                response_text += f"Max: ${stats.loc[exchange, ('price', 'max')]:.2f}\n\n"

            response_text += f'You can use an interactive chart visualizing this data in HTML like this : <iframe src="{s3_url}" width="100%" height="1200px" title="APR and Basis Live Data for {asset}"></iframe>'

            return response_text
        else:
            return "No data available for the specified parameters."

    except aiohttp.ClientError as e:
        return f"Error fetching data from API: {str(e)}"
    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"


@tool
async def get_comprehensive_apr_basis_data(asset, start_date, end_date, interval):
    """
    Retrieves comprehensive APR basis data for derivatives futures and perpetual contracts, including both live term structure and historical constant maturity data.

    This function calls both get_apr_basis_live_term_structure and get_apr_basis_constant_maturity
    to provide a complete picture of the current market conditions and historical trends.

    :param asset: The asset symbol (e.g., 'BTC', 'ETH')
    :param start_date: The start date for historical data (format: 'YYYY-MM-DD')
    :param end_date: The end date for historical data (format: 'YYYY-MM-DD')
    :param interval: The interval for historical data (e.g., '7D | 30D ')
    :return: A dictionary containing:
        - 'live_data': Results from get_apr_basis_live_term_structure
        - 'historical_data': Results from get_apr_basis_constant_maturity
    """

    resutls = await asyncio.gather(
        get_apr_basis_live_term_structure(asset=asset),
        get_apr_basis_constant_maturity(
            asset=asset, start_date=start_date, end_date=end_date, interval=interval
        ),
    )
    # Call get_apr_basis_live_term_structure
    live_data = resutls[0]

    # Call get_apr_basis_constant_maturity
    historical_data = resutls[1]

    # Combine the results into a single natural language response
    response = f"Comprehensive APR Basis Data for {asset}:\n\n"
    response += "Current Market Conditions:\n"
    response += live_data + "\n\n"
    response += "Historical Data and Trends:\n"
    response += historical_data

    return response


@tool
def get_derivatives_futures_funding_data(asset, start_date, end_date):
    """
    Retrieves funding realized/accumulated data for derivatives futures and perpetual contracts.

    This function accesses the Derivatives Futures/Perpetuals Funding Realized/Accumulated API endpoint,
    which provides data on the payments made between traders holding long and short positions in perpetual futures contracts.

    :param asset: The asset symbol (e.g., 'BTC')
    :param start_date: The start date for the data (in YYYY-MM-DD format)
    :param end_date: The end date for the data (in YYYY-MM-DD format)
    :return: A string containing a summary of the funding data and a chart URL, or an error message if the request fails.
    """
    endpoint = f"/markets/derivatives/analytics/futures-perpetuals/realized-funding-rates-cumulated"
    url = BASE_URL + endpoint

    headers = {"x-api-key": API_KEY, "Content-Type": "application/json"}

    params = {
        "asset": asset,
        "marginType": "coins",
        "startDate": start_date,
        "endDate": end_date,
        "timeFormat": "milliseconds",
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()

        if (
            data
            and "payload" in data
            and "data" in data["payload"]
            and len(data["payload"]["data"]) > 0
        ):
            df = pd.DataFrame(data["payload"]["data"])
            df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
            df.set_index("timestamp", inplace=True)

            # Group the data by symbol
            grouped = df.groupby("symbol")

            # Create a figure
            fig = go.Figure()

            # Color palette for different symbols
            colors = ['blue', 'red', 'green', 'purple', 'orange', 'brown', 'pink', 'gray']

            # Add traces for each symbol
            for i, (symbol, group) in enumerate(grouped):
                color = colors[i % len(colors)]
                visible = True if i == 0 else 'legendonly'  # Only the first symbol is visible by default
                
                # Add realizedFunding as bar chart
                fig.add_trace(
                    go.Bar(x=group.index, y=group["realizedFunding"], name=f"{symbol} Realized Funding", 
                           marker_color=color, visible=visible, opacity=0.6)
                )

                # Add accumulatedRealizedFunding as line chart
                fig.add_trace(
                    go.Scatter(x=group.index, y=group["accumulatedRealizedFunding"], name=f"{symbol} Accumulated Realized Funding", 
                               line=dict(color=color, width=3), visible=visible)
                )

            # Update layout
            fig.update_layout(
                height=600,
                title_text=f"Funding Data for {asset}",
                xaxis_title="Date",
                yaxis_title="Funding",
                legend_title="Metrics",
                hovermode="x unified",
                barmode='overlay'
            )

            # Add range slider
            fig.update_xaxes(rangeslider_visible=True)

            # Add second y-axis for accumulated funding
            fig.update_layout(
                yaxis2=dict(
                    title="Accumulated Funding",
                    overlaying="y",
                    side="right"
                )
            )

            # Save the figure as HTML
            filename = f"derivatives_futures_funding_{asset}_{uuid.uuid4()}.html"
            fig.write_html(filename)

            # Upload to S3
            s3_client.upload_file(filename, "musse.ai", f"charts/{filename}", ExtraArgs={'ContentType': 'text/html'})

            # Remove local file
            os.remove(filename)

            # Generate chart URL
            chart_url = f"https://musse.ai/charts/{filename}"

            # Calculate statistics for each symbol
            summary = f"Funding data for {asset} from {start_date} to {end_date}:\n\n"
            
            for symbol, group in grouped:
                total_realized_funding = group["realizedFunding"].sum()
                avg_realized_funding = group["realizedFunding"].mean()
                max_realized_funding = group["realizedFunding"].max()
                min_realized_funding = group["realizedFunding"].min()
                final_accumulated_funding = group["accumulatedRealizedFunding"].iloc[-1]

                summary += (
                    f"Symbol: {symbol}\n"
                    f"  Total Realized Funding: {total_realized_funding:.2f}\n"
                    f"  Average Realized Funding: {avg_realized_funding:.2f}\n"
                    f"  Maximum Realized Funding: {max_realized_funding:.2f}\n"
                    f"  Minimum Realized Funding: {min_realized_funding:.2f}\n"
                    f"  Final Accumulated Realized Funding: {final_accumulated_funding:.2f}\n\n"
                )

            summary += f'You can use the Interactive Chart in HTML like this: <iframe src="{chart_url}" width="100%" height="600px" title="Derivatives Futures Funding Data for {asset}"></iframe>'

            return summary
        else:
            return "No data available for the specified parameters."
    except requests.exceptions.RequestException as e:
        return f"API request error: {e}"


tools = [
    get_comprehensive_apr_basis_data,
    get_derivatives_futures_funding_data,
]
